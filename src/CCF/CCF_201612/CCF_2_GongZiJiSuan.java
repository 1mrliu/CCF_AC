package CCF_201612;

import java.util.Scanner;
/**
 * 问题描述
 　　小明的公司每个月给小明发工资，而小明拿到的工资为交完个人所得税之后的工资。假设他一个月的税前工资（扣除五险一金后、未扣税前的工资）为S元，则他应交的个人所得税按如下公式计算：
 　　1） 个人所得税起征点为3500元，若S不超过3500，则不交税，3500元以上的部分才计算个人所得税，令A=S-3500元；
 　　2） A中不超过1500元的部分，税率3%；
 　　3） A中超过1500元未超过4500元的部分，税率10%；
 　　4） A中超过4500元未超过9000元的部分，税率20%；
 　　5） A中超过9000元未超过35000元的部分，税率25%；
 　　6） A中超过35000元未超过55000元的部分，税率30%；
 　　7） A中超过55000元未超过80000元的部分，税率35%；
 　　8） A中超过80000元的部分，税率45%；
 　　例如，如果小明的税前工资为10000元，则A=10000-3500=6500元，其中不超过1500元部分应缴税1500×3%=45元，超过1500元不超过4500元部分应缴税(4500-1500)×10%=300元，超过4500元部分应缴税(6500-4500)×20%=400元。总共缴税745元，税后所得为9255元。
 　　已知小明这个月税后所得为T元，请问他的税前工资S是多少元。
 输入格式
 　　输入的第一行包含一个整数T，表示小明的税后所得。所有评测数据保证小明的税前工资为一个整百的数。
 输出格式
 　　输出一个整数S，表示小明的税前工资。
 样例输入
 9255
 样例输出
 10000
 评测用例规模与约定
 　　对于所有评测用例，1 ≤ T ≤ 100000。

 从编程方法上来说，一种是将工资段和税率写到程序逻辑中。这种做法修改程序比较难，逻辑也比较复杂。另外一种是查表法，
 通过查表来计算最后的结果。查表法的优点在于，单有关规定改变时，只需要调整表格，而不需要改变程序逻辑。

 该问题原始数据可以建两个表格，一是工资收入段表，二是税率表。根据这两个表可以算出收入范围表，即由实际收入得到最高税率是哪一档的表。
 进一步的计算就变得简单许多。

 程序说明： 商业应用开发中，是不允许出现任何金额计算错误的，误差也是不允许的。导致金额误差有多种原因，其中，使用浮点变量是常见的一种，
 一点要避免使用浮点类型变量，确保金额相关的计算准确无误
 */

public class CCF_2_GongZiJiSuan{
    public static void main(String[] args) {
        int salaryRange[] = { 3500, 3500 + 1500, 3500 + 4500, 3500 + 9000, 3500 + 35000, 3500 + 55000, 3500 + 80000 };
        int taxRate[] = { 3, 10, 20, 25, 30, 35, 45 };
        int SIZE = 7;// 分段
        int range[] = new int[SIZE];
        int t, s;
        Scanner sc = new Scanner(System.in);
        t = sc.nextInt();
        // 计算各种收入范围
        range[0] = salaryRange[0];
        for (int i = 1; i < SIZE; i++) {
            range[i] = range[i - 1] + (salaryRange[i] - salaryRange[i - 1]) - (salaryRange[i] - salaryRange[i - 1]) * taxRate[i - 1] / 100;
        }
        // 计算收入范围
        int i;
        for (i = 0; i < SIZE; i++)
            if (t <= range[i])
                break;
        // 计算税前工资
        if (i == 0)
            s = t;
        else {
            s = salaryRange[i - 1] + (t - range[i - 1]) * 100 / (100 - taxRate[i - 1]);
        }
        // 输出结果
        System.out.print(s);
        sc.close();
    }

}
